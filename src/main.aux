\relax 
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{italian}{}
\babel@aux{italian}{}
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Elementi di teoria dei grafi}{1}{chapter.1}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Grafi}{1}{section.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1.1}Definizioni}{1}{subsection.1.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.1}{\ignorespaces Un grafo indiretto.}}{2}{figure.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.2}{\ignorespaces Un grafo diretto.}}{2}{figure.1.2}\protected@file@percent }
\newlabel{Somma dei gradi}{{1.1.1.1}{2}{Somma dei gradi}{lemma.1.1.1.1}{}}
\newlabel{Somma dei gradi@cref}{{[lemma][1][1,1,1]1.1.1.1}{[1][2][]2}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.3}{\ignorespaces Un grafo diretto con cappio in 3.}}{3}{figure.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1.2}Visite}{3}{subsection.1.1.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.4}{\ignorespaces Un grafo indiretto.}}{4}{figure.1.4}\protected@file@percent }
\newlabel{cammini e passeggiate}{{1.1.2.1}{4}{Cammini e passeggiate}{theorem.1.1.2.1}{}}
\newlabel{cammini e passeggiate@cref}{{[theorem][1][1,1,2]1.1.2.1}{[1][4][]4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.5}{\ignorespaces Un grafo indiretto.}}{5}{figure.1.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.6}{\ignorespaces Un grafo diretto con ordinamenti topologici.}}{5}{figure.1.6}\protected@file@percent }
\newlabel{Ordinamento topologico}{{1.1.2.2}{5}{Ordinamento topologico}{theorem.1.1.2.2}{}}
\newlabel{Ordinamento topologico@cref}{{[theorem][2][1,1,2]1.1.2.2}{[1][5][]5}}
\newlabel{vertici particolari}{{1.1.2.1}{6}{Vertici particolari}{corollary.1.1.2.1}{}}
\newlabel{vertici particolari@cref}{{[corollary][1][1,1,2]1.1.2.1}{[1][6][]6}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.7}{\ignorespaces Un grafo diretto.}}{6}{figure.1.7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.8}{\ignorespaces Arborescenza di $3$.}}{6}{figure.1.8}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.9}{\ignorespaces Un grafo non connesso.}}{7}{figure.1.9}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.10}{\ignorespaces Un albero.}}{7}{figure.1.10}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.11}{\ignorespaces Un grafo fortemente connesso.}}{8}{figure.1.11}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.12}{\ignorespaces Un grafo indiretto.}}{8}{figure.1.12}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.2}Rappresentazione}{9}{section.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.1}Matrici di adiacenza}{9}{subsection.1.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.2}Liste di adiacenza}{10}{subsection.1.2.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.13}{\ignorespaces Un grafo indiretto.}}{11}{figure.1.13}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.3}DFS (Depth-first Search)}{12}{section.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.1}Trovare un ciclo}{12}{subsection.1.3.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.1.1}{\ignorespaces  Dato un grafo indiretto $G$, con ogni vertice avente grado almeno pari a $2$, l'algoritmo restituisce un ciclo di $G$.\\ \textbf  {Input}: $G$ grafo indiretto, tale che $\forall v \in V(G) \hskip 1em\relax \deg (v) \ge 2$.\\ \textbf  {Output}: un ciclo di $G$. }}{12}{algorithm.1.3.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.14}{\ignorespaces Un grafo diretto contenente un ciclo.}}{13}{figure.1.14}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.2}Visita in DFS}{14}{subsection.1.3.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.2.1}{\ignorespaces  Prima versione dell'algoritmo; dato un grafo $G$, diretto o indiretto, e un suo vertice $v$, l'algoritmo restituisce tutti i vertici, raggiungibili attraverso cammini, partendo da $v$.\\ \textbf  {Input}: $G$ un grafo; $v$ un vertice di $G$.\\ \textbf  {Output}: i vertici raggiungibili da $v$. }}{14}{algorithm.1.3.2.1}\protected@file@percent }
\newlabel{Sottografo di un grafo indiretto}{{1.3.2.3}{15}{Albero}{remark.1.3.2.3}{}}
\newlabel{Sottografo di un grafo indiretto@cref}{{[remark][3][1,3,2]1.3.2.3}{[1][15][]15}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.2.2}{\ignorespaces  Seconda versione dell'algoritmo; dato un grafo $G$, diretto o indiretto, rappresentato attraverso liste di adiacenza, e un suo vertice $v$, l'algoritmo restituisce tutti i vertici, raggiungibili attraverso cammini, partendo da $v$.\\ \textbf  {Input}: $G$ un grafo, rappresentato attraverso liste di adiacenza; $v$ un vertice di $G$.\\ \textbf  {Output}: i vertici raggiungibili da $v$. }}{16}{algorithm.1.3.2.2}\protected@file@percent }
\newlabel{findReachableNodes2}{{0}{16}{Visita in DFS}{algorithm.1.3.2.2}{}}
\newlabel{findReachableNodes2@cref}{{[algorithm][2][1,3,2]1.3.2.2}{[1][16][]16}}
\newlabel{costo findReachableNodes2}{{1.3.2.6}{17}{Costo dell'algoritmo}{remark.1.3.2.6}{}}
\newlabel{costo findReachableNodes2@cref}{{[remark][6][1,3,2]1.3.2.6}{[1][17][]17}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.3}Trovare un ordinamento topologico}{17}{subsection.1.3.3}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.3.1}{\ignorespaces  Dato un grafo diretto aciclico $G$, l'algoritmo restituisce un suo ordinamento topologico.\\ \textbf  {Input}: $G$ grafo diretto aciclico.\\ \textbf  {Output}: un ordinamento topologico di $G$. }}{17}{algorithm.1.3.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.4}Tempi di visita e di chiusura}{18}{section.1.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.1}Definizioni}{18}{subsection.1.4.1}\protected@file@percent }
\newlabel{Intervalli diretto}{{1.4.1.1}{19}{Proprietà degli intervalli}{lemma.1.4.1.1}{}}
\newlabel{Intervalli diretto@cref}{{[lemma][1][1,4,1]1.4.1.1}{[1][19][]19}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.1.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza (nel caso di $G$ diretto, l'adiacenza è dei nodi uscenti), e un suo vertice $r$, l'algoritmo restituisce i tempi di visita e di chiusura dei nodi di $G$, relativi alla visita dell'albero, o dell'arborescenza, di $r$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $r$ un vertice di $G$.\\ \textbf  {Output}: tempi di visita e di chiusura dei $v \in V(G)$, relativi all'albero, o all'arborescenza, di $r$. }}{20}{algorithm.1.4.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.2}Categorie di archi}{21}{subsection.1.4.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.15}{\ignorespaces Un multigrafo diretto.}}{22}{figure.1.15}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.16}{\ignorespaces Un'arborescenza, radicata in 1, di un multigrafo diretto.}}{22}{figure.1.16}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.2.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza (per ogni vertice sono salvate due liste, dei vertici entranti e dei vertici uscenti), e un suo vertice $v$, l'algoritmo restituisce gli archi non facenti parti dell'arborescenza di $v$, categorizzati in base ai loro intervalli di apertura e chiusura.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza; $v$ un vertice di $G$.\\ \textbf  {Output}: archi non dell'arborescenza, categorizzati per intervalli. }}{24}{algorithm.1.4.2.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.2.2}{\ignorespaces  Dato un'array di padri \texttt  {parents}, che rappresenta un'arborescenza di visita in DFS di un grafo diretto, e un arco $(x, y)$ del grafo, l'algoritmo restituisce il tipo di arco.\\ \textbf  {Input}: \texttt  {parents} array di padri di un'arborescenza di visita in DFS di un grafo diretto; $(x, y)$ un arco del grafo.\\ \textbf  {Output}: la categoria di $(x, y)$. }}{27}{algorithm.1.4.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.3}Trovare un ordinamento topologico}{28}{subsection.1.4.3}\protected@file@percent }
\newlabel{Cicli diretto}{{1.4.3.1}{28}{Presenza di cicli}{theorem.1.4.3.1}{}}
\newlabel{Cicli diretto@cref}{{[theorem][1][1,4,3]1.4.3.1}{[1][28][]28}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.3.1}{\ignorespaces  Dato un grafo diretto aciclico connesso $G$, rappresentato attraverso liste di adiacenza in cui vengono salvati gli archi adiacenti uscenti, l'algoritmo restituisce un ordinamento topologico di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: un ordinamento topologico di $G$. }}{30}{algorithm.1.4.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.4}Trovare un pozzo universale}{31}{subsection.1.4.4}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.17}{\ignorespaces Un grafo con pozzo universale in $3$.}}{31}{figure.1.17}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.4.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso matrice di adiacenza, l'algoritmo restituisce, se presente, il pozzo universale di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso matrice di adiacenza.\\ \textbf  {Output}: il pozzo universale di $G$, se presente. }}{32}{algorithm.1.4.4.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.18}{\ignorespaces Un grafo che contiene un possibile pozzo universale.}}{32}{figure.1.18}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.5}Trovare i ponti}{33}{subsection.1.4.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.19}{\ignorespaces Un grafo con un ponte.}}{33}{figure.1.19}\protected@file@percent }
\newlabel{teorema dei ponti}{{1.4.5.1}{33}{Presenza di ponti}{theorem.1.4.5.1}{}}
\newlabel{teorema dei ponti@cref}{{[theorem][1][1,4,5]1.4.5.1}{[1][33][]33}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.5.1}{\ignorespaces  Dato un grafo indiretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce i ponti di $G$.\\ \textbf  {Input}: $G$ grafo indiretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: i ponti di $G$. }}{35}{algorithm.1.4.5.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.20}{\ignorespaces Un grafo indiretto.}}{37}{figure.1.20}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.6}Trovare le componenti}{37}{subsection.1.4.6}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.21}{\ignorespaces Un grafo indiretto.}}{38}{figure.1.21}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.22}{\ignorespaces Un grafo diretto.}}{38}{figure.1.22}\protected@file@percent }
\newlabel{disjoint comps}{{1.4.6.1}{38}{Digiunzione delle componenti}{lemma.1.4.6.1}{}}
\newlabel{disjoint comps@cref}{{[lemma][1][1,4,6]1.4.6.1}{[1][38][]38}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.23}{\ignorespaces Il grafo iniziale massimalmente contratto.}}{40}{figure.1.23}\protected@file@percent }
\newlabel{contrazioni fortemente connesse}{{1.4.6.1}{40}{Contrazioni fortemente connesse}{theorem.1.4.6.1}{}}
\newlabel{contrazioni fortemente connesse@cref}{{[theorem][1][1,4,6]1.4.6.1}{[1][40][]40}}
\newlabel{presenza di cicli fort conn}{{1.4.6.2}{40}{Presenza di cicli}{theorem.1.4.6.2}{}}
\newlabel{presenza di cicli fort conn@cref}{{[theorem][2][1,4,6]1.4.6.2}{[1][40][]40}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.6.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza, con liste di archi sia entranti che uscenti per ogni vertice, l'algoritmo restituisce le componenti di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza, con liste di archi sia entranti che uscenti per ogni vertice.\\ \textbf  {Output}: le componenti di $G$. }}{41}{algorithm.1.4.6.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.24}{\ignorespaces Un grafo diretto.}}{42}{figure.1.24}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.25}{\ignorespaces Arborescenza di $2$.}}{42}{figure.1.25}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.6.2}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce le componenti di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: le componenti di $G$. }}{45}{algorithm.1.4.6.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.7}Trovare un ciclo}{46}{subsection.1.4.7}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.7.1}{\ignorespaces  Dato un grafo indiretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce un suo ciclo, se presente.\\ \textbf  {Input}: $G$ grafo indiretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: un ciclo di $G$, se presente. }}{46}{algorithm.1.4.7.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.5}BFS (Breadth-first Search)}{48}{section.1.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.1}Distanza}{48}{subsection.1.5.1}\protected@file@percent }
\newlabel{distanza}{{1.5.1.1}{48}{Distanza}{definition.1.5.1.1}{}}
\newlabel{distanza@cref}{{[definition][1][1,5,1]1.5.1.1}{[1][48][]48}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.1.1}{\ignorespaces  Dato un array di padri di un grafo (nel caso questo fosse diretto, l'array rappresenterebbe una visita in DFS di tale grafo), e due suoi vertici $x$ ed $y$, l'algoritmo restituisce la loro distanza.\\ \textbf  {Input}: \texttt  {parents} un array di padri di un grafo; $x, y$ due vertici del grafo.\\ \textbf  {Output}: $\mathrm  {dist}(x, y)$. }}{49}{algorithm.1.5.1.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.1.2}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza, e un vettore di padri di un albero/arborescenza di visita in DFS di $G$, l'algoritmo restituisce la distanza di ogni vertice dalla radice dell'albero/arborescenza.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza; \texttt  {parents} un array di padri di un albero/arborescenza radicato in un certo $r \in V(G)$.\\ \textbf  {Output}: $\forall v \in V(G) \hskip 1em\relax \mathrm  {dist}(r, v)$. }}{51}{algorithm.1.5.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.2}Visita in BFS}{53}{subsection.1.5.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.2.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza (nel caso di grafo diretto, è sufficiente memorizzare gli archi uscenti per ogni vertice), ed un suo vertice $u \in V(G)$, l'algoritmo restituisce le distanze dei vertici di $G$ da $u$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $u \in V(G)$ un vertice di $G$.\\ \textbf  {Output}: $\forall v \in V(G) \hskip 1em\relax \mathrm  {dist}(u, v)$. }}{53}{algorithm.1.5.2.1}\protected@file@percent }
\newlabel{bfs}{{0}{53}{Visita in BFS}{algorithm.1.5.2.1}{}}
\newlabel{bfs@cref}{{[algorithm][1][1,5,2]1.5.2.1}{[1][53][]53}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.26}{\ignorespaces Un grafo indiretto.}}{55}{figure.1.26}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.27}{\ignorespaces Un grafo indiretto.}}{56}{figure.1.27}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.28}{\ignorespaces Un grafo indiretto.}}{56}{figure.1.28}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.3}Trovare il numero di cammini minimi}{57}{subsection.1.5.3}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.3.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza, ed un suo vertice $u$, per ogni $v \in V(G)$, l'algoritmo restituisce il numero di cammini minimi della forma $u \rightarrow v$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $u \in V(G)$ un vertice di $G$.\\ \textbf  {Output}: per ogni vertice $v \in V(G)$, il numero di cammini minimi della forma $u \rightarrow v$. }}{57}{algorithm.1.5.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.4}Distanza tra insiemi di vertici}{58}{subsection.1.5.4}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.4.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza, e due suoi sottoinsiemi di vertici $X, Y \subseteq V(G)$, l'algoritmo restituisce $\mathrm  {dist}(X, Y)$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $X, Y \subseteq V(G)$ sottoinsiemi di vertici di $G$.\\ \textbf  {Output}: $\mathrm  {dist}(X, Y)$. }}{59}{algorithm.1.5.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.5}Archi pesati}{60}{subsection.1.5.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.29}{\ignorespaces Un grafo indiretto pesato.}}{60}{figure.1.29}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.30}{\ignorespaces Un grafo indiretto pesato.}}{61}{figure.1.30}\protected@file@percent }
\newlabel{caratteristiche distanze pesate}{{1.5.5.1}{61}{Caratteristiche delle distanze pesate}{lemma.1.5.5.1}{}}
\newlabel{caratteristiche distanze pesate@cref}{{[lemma][1][1,5,5]1.5.5.1}{[1][61][]61}}
\newlabel{vicini pesati}{{1.5.5.2}{62}{Distanze pesate dei vicini}{lemma.1.5.5.2}{}}
\newlabel{vicini pesati@cref}{{[lemma][2][1,5,5]1.5.5.2}{[1][62][]62}}
\newlabel{dijkstra theorem}{{1.5.5.1}{63}{Estensioni pesate di insiemi di vertici}{theorem.1.5.5.1}{}}
\newlabel{dijkstra theorem@cref}{{[theorem][1][1,5,5]1.5.5.1}{[1][62][]63}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.6}Algoritmo di Dijkstra}{64}{subsection.1.5.6}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.6.1}{\ignorespaces  Dato un grafo pesato $G$ attraverso $w$, e $u \in V(G)$ un suo vertice, l'algoritmo restituisce le distanze pesate dei vertici di $G$ da $u$; l'algoritmo assume che ogni vertice di $G$ sia raggiungibile da $u$, e che ogni peso definito da $w$ sia strettamente positivo.\\ \textbf  {Input}: $G$ grafo, e $u$ un suo vertice tale che per ogni $x \in V(G)$ esiste un cammino della forma $u \rightarrow x$; $w$ una funzione che associa pesi agli archi in $E(G)$, tale che ogni peso sia strettamente positivo.\\ \textbf  {Output}: le distanze dei vertici di $G$ da $u$. }}{64}{algorithm.1.5.6.1}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Algoritmi greedy}{66}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Algoritmi greedy}{66}{section.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Definizioni}{66}{subsection.2.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Intervalli}{67}{section.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Trovare intervalli disgiunti}{67}{subsection.2.2.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.2.1.1}{\ignorespaces  Data una lista di intervalli, l'algoritmo restituisce l'insieme di restituisce il sottoinsieme di intervalli disgiunti, di cardinalità massima.\\ \textbf  {Input}: $I$ lista di intervalli di numeri reali della forma $[a, b]$, con $a, b \in \mathbb  {R}$.\\ \textbf  {Output}: il sottoinsieme di $I$ di intervalli disgiunti di cardinalità massima. }}{67}{algorithm.2.2.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}Trovare insieme non disgiunto}{70}{subsection.2.2.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.2.2.1}{\ignorespaces  Data una lista di intervalli, l'algoritmo restituisce l'insieme, di cardinalità minima, di interi $x_1, \ldots  , x_k$, tali da intersecarsi con ogni intervallo.\\ \textbf  {Input}: $I$ lista di intervalli di numeri reali della forma $[a, b]$, con $a, b \in \mathbb  {R}$.\\ \textbf  {Output}: l'insieme minimo di $x_1, \ldots  , x_n$ tali che $\forall i \in I \hskip 1em\relax i \cap \{x_1, \ldots  , x_n\} \neq  \varnothing $. }}{70}{algorithm.2.2.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.3}MST (Minimum Spanning Tree)}{70}{section.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Definizioni}{70}{subsection.2.3.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces Un grafo indiretto pesato.}}{71}{figure.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces Un MST del grafo pesato.}}{71}{figure.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.2}Algoritmo di Kruskal}{72}{subsection.2.3.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.3.2.1}{\ignorespaces  Dato un grafo indiretto $G$, pesato attraverso $w$, l'algoritmo ne restituisce un MST.\\ \textbf  {Input}: $G$ grafo indiretto; $w$ una funzione che associa pesi agli archi in $E(G)$.\\ \textbf  {Output}: un MST di $G$. }}{72}{algorithm.2.3.2.1}\protected@file@percent }
\gdef \@abspage@last{75}
