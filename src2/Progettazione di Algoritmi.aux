\relax 
\providecommand\zref@newlabel[2]{}
\abx@aux@refcontext{none/global//global/global}
\providecommand\babel@aux[2]{}
\@nameuse{bbl@beforestart}
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{italian}{}
\babel@aux{italian}{}
\pgfsyspdfmark {pgfid1}{4661699}{25683524}
\@writefile{toc}{\contentsline {chapter}{Informazioni e Contatti}{1}{chapter*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Prerequisiti consigliati:}{1}{subsubsection*.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Segnalazione errori ed eventuali migliorie:}{1}{subsubsection*.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Licenza di distribuzione:}{1}{subsubsection*.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsubsection}{Contatti dell'autore e ulteriori link:}{1}{subsubsection*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {1}Elementi di teoria dei grafi}{2}{chapter.1}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {1.1}Grafi}{2}{section.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1.1}Definizioni}{2}{subsection.1.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.1}{\ignorespaces Un grafo indiretto.}}{3}{figure.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.2}{\ignorespaces Un grafo diretto.}}{3}{figure.1.2}\protected@file@percent }
\newlabel{Somma dei gradi}{{1.1.1.1}{4}{Somma dei gradi}{tcb@cnt@framedlem.1.1.1.1}{}}
\newlabel{Somma dei gradi@cref}{{[framedlem][1][1,1,1]1.1.1.1}{[1][4][]4}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.3}{\ignorespaces Un grafo diretto con cappio in 3.}}{4}{figure.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1.2}Visite}{5}{subsection.1.1.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.4}{\ignorespaces Un grafo indiretto.}}{5}{figure.1.4}\protected@file@percent }
\newlabel{cammini e passeggiate}{{1.1.2.1}{6}{Cammini e passeggiate}{tcb@cnt@framedthm.1.1.2.1}{}}
\newlabel{cammini e passeggiate@cref}{{[framedthm][1][1,1,2]1.1.2.1}{[1][6][]6}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.5}{\ignorespaces Un grafo indiretto.}}{6}{figure.1.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.6}{\ignorespaces Un grafo diretto con ordinamenti topologici.}}{7}{figure.1.6}\protected@file@percent }
\newlabel{Ordinamento topologico}{{1.1.2.2}{7}{Ordinamento topologico}{tcb@cnt@framedthm.1.1.2.2}{}}
\newlabel{Ordinamento topologico@cref}{{[framedthm][2][1,1,2]1.1.2.2}{[1][7][]7}}
\newlabel{vertici particolari}{{1.1.2.1}{7}{Vertici particolari}{tcb@cnt@framedcor.1.1.2.1}{}}
\newlabel{vertici particolari@cref}{{[framedcor][1][1,1,2]1.1.2.1}{[1][7][]7}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.7}{\ignorespaces Un grafo diretto.}}{8}{figure.1.7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.8}{\ignorespaces Arborescenza di $3$.}}{8}{figure.1.8}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.9}{\ignorespaces Un grafo non connesso.}}{9}{figure.1.9}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.10}{\ignorespaces Un albero.}}{9}{figure.1.10}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.11}{\ignorespaces Un grafo fortemente connesso.}}{9}{figure.1.11}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.12}{\ignorespaces Un grafo indiretto.}}{10}{figure.1.12}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.2}Rappresentazione}{11}{section.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.1}Matrici di adiacenza}{11}{subsection.1.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2.2}Liste di adiacenza}{12}{subsection.1.2.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.13}{\ignorespaces Un grafo indiretto.}}{13}{figure.1.13}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.3}Depth-first Search (DFS)}{14}{section.1.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.1}Trovare un ciclo}{14}{subsection.1.3.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.1.1}{\ignorespaces  Dato un grafo indiretto $G$, con ogni vertice avente grado almeno pari a $2$, l'algoritmo restituisce un ciclo di $G$.\\ \textbf  {Input}: $G$ grafo indiretto, tale che $\forall v \in V(G) \hskip 1em\relax \deg (v) \ge 2$.\\ \textbf  {Output}: un ciclo di $G$. }}{14}{algorithm.1.3.1.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.14}{\ignorespaces Un grafo diretto contenente un ciclo.}}{15}{figure.1.14}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.2}Visita in DFS}{16}{subsection.1.3.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.2.1}{\ignorespaces  Prima versione dell'algoritmo; dato un grafo $G$, diretto o indiretto, e un suo vertice $v$, l'algoritmo restituisce tutti i vertici, raggiungibili attraverso cammini, partendo da $v$.\\ \textbf  {Input}: $G$ un grafo; $v$ un vertice di $G$.\\ \textbf  {Output}: i vertici raggiungibili da $v$. }}{16}{algorithm.1.3.2.1}\protected@file@percent }
\newlabel{Sottografo di un grafo indiretto}{{1.3.2.1}{17}{Albero}{tcb@cnt@framedobs.1.3.2.1}{}}
\newlabel{Sottografo di un grafo indiretto@cref}{{[framedobs][1][1,3,2]1.3.2.1}{[1][17][]17}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.2.2}{\ignorespaces  Seconda versione dell'algoritmo; dato un grafo $G$, diretto o indiretto, rappresentato attraverso liste di adiacenza, e un suo vertice $v$, l'algoritmo restituisce tutti i vertici, raggiungibili attraverso cammini, partendo da $v$.\\ \textbf  {Input}: $G$ un grafo, rappresentato attraverso liste di adiacenza; $v$ un vertice di $G$.\\ \textbf  {Output}: i vertici raggiungibili da $v$. }}{18}{algorithm.1.3.2.2}\protected@file@percent }
\newlabel{findReachableNodes2}{{0}{18}{Visita in DFS}{algorithm.1.3.2.2}{}}
\newlabel{findReachableNodes2@cref}{{[line][0][]0}{[1][18][]18}}
\newlabel{costo FRN2}{{1.3.2}{18}{Visita in DFS}{ALG@line.20}{}}
\newlabel{costo FRN2@cref}{{[subsection][2][1,3]1.3.2}{[1][18][]18}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3.3}Trovare un ordinamento topologico}{19}{subsection.1.3.3}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.3.3.1}{\ignorespaces  Dato un grafo diretto aciclico $G$, l'algoritmo restituisce un suo ordinamento topologico.\\ \textbf  {Input}: $G$ grafo diretto aciclico.\\ \textbf  {Output}: un ordinamento topologico di $G$. }}{19}{algorithm.1.3.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {1.4}Tempi di visita e di chiusura}{20}{section.1.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.1}Definizioni}{20}{subsection.1.4.1}\protected@file@percent }
\newlabel{Intervalli diretto}{{1.4.1.1}{21}{Proprietà degli intervalli}{tcb@cnt@framedlem.1.4.1.1}{}}
\newlabel{Intervalli diretto@cref}{{[framedlem][1][1,4,1]1.4.1.1}{[1][20][]21}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.1.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza (nel caso di $G$ diretto, l'adiacenza è dei nodi uscenti), e un suo vertice $r$, l'algoritmo restituisce i tempi di visita e di chiusura dei nodi di $G$, relativi alla visita dell'albero, o dell'arborescenza, di $r$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $r$ un vertice di $G$.\\ \textbf  {Output}: tempi di visita e di chiusura dei $v \in V(G)$, relativi all'albero, o all'arborescenza, di $r$. }}{22}{algorithm.1.4.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.2}Categorie di archi}{23}{subsection.1.4.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.15}{\ignorespaces Un multigrafo diretto.}}{23}{figure.1.15}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.16}{\ignorespaces Un'arborescenza, radicata in 1, di un multigrafo diretto.}}{24}{figure.1.16}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.2.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza (per ogni vertice sono salvate due liste, dei vertici entranti e dei vertici uscenti), e un suo vertice $v$, l'algoritmo restituisce gli archi non facenti parti dell'arborescenza di $v$, categorizzati in base ai loro intervalli di apertura e chiusura.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza; $v$ un vertice di $G$.\\ \textbf  {Output}: archi non dell'arborescenza, categorizzati per intervalli. }}{25}{algorithm.1.4.2.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.2.2}{\ignorespaces  Dato un'array di padri \texttt  {parents}, che rappresenta un'arborescenza di visita in DFS di un grafo diretto, e un arco $(x, y)$ del grafo, l'algoritmo restituisce il tipo di arco.\\ \textbf  {Input}: \texttt  {parents} array di padri di un'arborescenza di visita in DFS di un grafo diretto; $(x, y)$ un arco del grafo.\\ \textbf  {Output}: la categoria di $(x, y)$. }}{28}{algorithm.1.4.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.3}Trovare un ordinamento topologico}{29}{subsection.1.4.3}\protected@file@percent }
\newlabel{Cicli diretto}{{1.4.3.1}{29}{Presenza di cicli}{tcb@cnt@framedthm.1.4.3.1}{}}
\newlabel{Cicli diretto@cref}{{[framedthm][1][1,4,3]1.4.3.1}{[1][29][]29}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.3.1}{\ignorespaces  Dato un grafo diretto aciclico connesso $G$, rappresentato attraverso liste di adiacenza in cui vengono salvati gli archi adiacenti uscenti, l'algoritmo restituisce un ordinamento topologico di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: un ordinamento topologico di $G$. }}{31}{algorithm.1.4.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.4}Trovare un pozzo universale}{31}{subsection.1.4.4}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.17}{\ignorespaces Un grafo con pozzo universale in $3$.}}{32}{figure.1.17}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.4.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso matrice di adiacenza, l'algoritmo restituisce, se presente, il pozzo universale di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso matrice di adiacenza.\\ \textbf  {Output}: il pozzo universale di $G$, se presente. }}{32}{algorithm.1.4.4.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.18}{\ignorespaces Un grafo che contiene un possibile pozzo universale.}}{33}{figure.1.18}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.5}Trovare i ponti}{33}{subsection.1.4.5}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.19}{\ignorespaces Un grafo con un ponte.}}{33}{figure.1.19}\protected@file@percent }
\newlabel{teorema dei ponti}{{1.4.5.1}{34}{Presenza di ponti}{tcb@cnt@framedthm.1.4.5.1}{}}
\newlabel{teorema dei ponti@cref}{{[framedthm][1][1,4,5]1.4.5.1}{[1][33][]34}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.5.1}{\ignorespaces  Dato un grafo indiretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce i ponti di $G$.\\ \textbf  {Input}: $G$ grafo indiretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: i ponti di $G$. }}{35}{algorithm.1.4.5.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.20}{\ignorespaces Un grafo indiretto.}}{36}{figure.1.20}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.6}Trovare le componenti}{37}{subsection.1.4.6}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.21}{\ignorespaces Un grafo indiretto.}}{37}{figure.1.21}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.22}{\ignorespaces Un grafo diretto.}}{38}{figure.1.22}\protected@file@percent }
\newlabel{disjoint comps}{{1.4.6.1}{38}{Digiunzione delle componenti}{tcb@cnt@framedlem.1.4.6.1}{}}
\newlabel{disjoint comps@cref}{{[framedlem][1][1,4,6]1.4.6.1}{[1][38][]38}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.23}{\ignorespaces Il grafo iniziale massimalmente contratto.}}{39}{figure.1.23}\protected@file@percent }
\newlabel{contrazioni fortemente connesse}{{1.4.6.1}{39}{Contrazioni fortemente connesse}{tcb@cnt@framedthm.1.4.6.1}{}}
\newlabel{contrazioni fortemente connesse@cref}{{[framedthm][1][1,4,6]1.4.6.1}{[1][39][]39}}
\newlabel{presenza di cicli fort conn}{{1.4.6.2}{40}{Presenza di cicli}{tcb@cnt@framedthm.1.4.6.2}{}}
\newlabel{presenza di cicli fort conn@cref}{{[framedthm][2][1,4,6]1.4.6.2}{[1][40][]40}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.6.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza, con liste di archi sia entranti che uscenti per ogni vertice, l'algoritmo restituisce le componenti di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza, con liste di archi sia entranti che uscenti per ogni vertice.\\ \textbf  {Output}: le componenti di $G$. }}{40}{algorithm.1.4.6.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.7}Algoritmo di Tarjan}{41}{subsection.1.4.7}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.24}{\ignorespaces Un grafo diretto.}}{42}{figure.1.24}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.25}{\ignorespaces Arborescenza di $2$.}}{42}{figure.1.25}\protected@file@percent }
\newlabel{cradiciteorema}{{1.4.7.1}{42}{C-radici}{tcb@cnt@framedthm.1.4.7.1}{}}
\newlabel{cradiciteorema@cref}{{[framedthm][1][1,4,7]1.4.7.1}{[1][42][]42}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.7.1}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce le componenti di $G$.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: le componenti di $G$. }}{44}{algorithm.1.4.7.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4.8}Trovare un ciclo}{46}{subsection.1.4.8}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.8.1}{\ignorespaces  Dato un grafo indiretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce un suo ciclo, se presente.\\ \textbf  {Input}: $G$ grafo indiretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: un ciclo di $G$, se presente. }}{46}{algorithm.1.4.8.1}\protected@file@percent }
\newlabel{findCycleNonDir}{{0}{46}{Trovare un ciclo}{algorithm.1.4.8.1}{}}
\newlabel{findCycleNonDir@cref}{{[line][0][]0}{[1][46][]46}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.4.8.2}{\ignorespaces  Dato un grafo diretto $G$, rappresentato attraverso liste di adiacenza, l'algoritmo restituisce un suo ciclo, se presente.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza.\\ \textbf  {Output}: un ciclo di $G$, se presente. }}{48}{algorithm.1.4.8.2}\protected@file@percent }
\newlabel{findCycleDir}{{0}{48}{Trovare un ciclo}{algorithm.1.4.8.2}{}}
\newlabel{findCycleDir@cref}{{[line][0][]0}{[1][48][]48}}
\@writefile{toc}{\contentsline {section}{\numberline {1.5}Breadth-first Search (BFS)}{49}{section.1.5}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.1}Distanza}{49}{subsection.1.5.1}\protected@file@percent }
\newlabel{distanza}{{1.5.1.1}{49}{Distanza}{tcb@cnt@frameddefn.1.5.1.1}{}}
\newlabel{distanza@cref}{{[frameddefn][1][1,5,1]1.5.1.1}{[1][49][]49}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.1.1}{\ignorespaces  Dato un array di padri di un grafo (nel caso questo fosse diretto, l'array rappresenterebbe una visita in DFS di tale grafo), e due suoi vertici $x$ ed $y$, l'algoritmo restituisce la loro distanza.\\ \textbf  {Input}: \texttt  {parents} un array di padri di un grafo; $x, y$ due vertici del grafo.\\ \textbf  {Output}: $\mathrm  {dist}(x, y)$. }}{50}{algorithm.1.5.1.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.1.2}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza, e un vettore di padri di un albero/arborescenza di visita in DFS di $G$, l'algoritmo restituisce la distanza di ogni vertice dalla radice dell'albero/arborescenza.\\ \textbf  {Input}: $G$ grafo diretto, rappresentato attraverso liste di adiacenza; \texttt  {parents} un array di padri di un albero/arborescenza radicato in un certo $r \in V(G)$.\\ \textbf  {Output}: $\forall v \in V(G) \hskip 1em\relax \mathrm  {dist}(r, v)$. }}{52}{algorithm.1.5.1.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.2}Visita in BFS}{53}{subsection.1.5.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.2.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza (nel caso di grafo diretto, è sufficiente memorizzare gli archi uscenti per ogni vertice), ed un suo vertice $u \in V(G)$, l'algoritmo restituisce le distanze dei vertici di $G$ da $u$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $u \in V(G)$ un vertice di $G$.\\ \textbf  {Output}: $\forall v \in V(G) \hskip 1em\relax \mathrm  {dist}(u, v)$. }}{54}{algorithm.1.5.2.1}\protected@file@percent }
\newlabel{bfs}{{0}{54}{Visita in BFS}{algorithm.1.5.2.1}{}}
\newlabel{bfs@cref}{{[line][0][]0}{[1][53][]54}}
\@writefile{lof}{\contentsline {figure}{\numberline {1.26}{\ignorespaces Un grafo indiretto.}}{55}{figure.1.26}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.27}{\ignorespaces Un grafo indiretto.}}{56}{figure.1.27}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1.28}{\ignorespaces Un grafo indiretto.}}{56}{figure.1.28}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.3}Trovare il numero di cammini minimi}{57}{subsection.1.5.3}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.3.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza, ed un suo vertice $u$, per ogni $v \in V(G)$, l'algoritmo restituisce il numero di cammini minimi della forma $u \rightarrow v$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $u \in V(G)$ un vertice di $G$.\\ \textbf  {Output}: per ogni vertice $v \in V(G)$, il numero di cammini minimi della forma $u \rightarrow v$. }}{57}{algorithm.1.5.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5.4}Distanza tra insiemi di vertici}{58}{subsection.1.5.4}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {1.5.4.1}{\ignorespaces  Dato un grafo $G$, rappresentato attraverso liste di adiacenza, e due suoi sottoinsiemi di vertici $X, Y \subseteq V(G)$, l'algoritmo restituisce $\mathrm  {dist}(X, Y)$.\\ \textbf  {Input}: $G$ grafo, rappresentato attraverso liste di adiacenza; $X, Y \subseteq V(G)$ sottoinsiemi di vertici di $G$.\\ \textbf  {Output}: $\mathrm  {dist}(X, Y)$. }}{59}{algorithm.1.5.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {2}Algoritmi greedy}{61}{chapter.2}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {2.1}Algoritmi greedy}{61}{section.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1.1}Definizioni}{61}{subsection.2.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.2}Distanza pesata}{61}{section.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.1}Archi pesati}{61}{subsection.2.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.1}{\ignorespaces Un grafo indiretto pesato.}}{62}{figure.2.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.2}{\ignorespaces Un grafo indiretto pesato.}}{62}{figure.2.2}\protected@file@percent }
\newlabel{caratteristiche distanze pesate}{{2.2.1.1}{63}{Caratteristiche delle distanze pesate}{tcb@cnt@framedlem.2.2.1.1}{}}
\newlabel{caratteristiche distanze pesate@cref}{{[framedlem][1][2,2,1]2.2.1.1}{[1][63][]63}}
\newlabel{vicini pesati}{{2.2.1.2}{64}{Distanze pesate dei vicini}{tcb@cnt@framedlem.2.2.1.2}{}}
\newlabel{vicini pesati@cref}{{[framedlem][2][2,2,1]2.2.1.2}{[1][63][]64}}
\newlabel{dijkstra theorem}{{2.2.1.1}{64}{Estensioni pesate di insiemi di vertici}{tcb@cnt@framedthm.2.2.1.1}{}}
\newlabel{dijkstra theorem@cref}{{[framedthm][1][2,2,1]2.2.1.1}{[1][64][]64}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2.2}Algoritmo di Dijkstra}{65}{subsection.2.2.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.2.2.1}{\ignorespaces  Dato un grafo pesato $G$ attraverso $w$, e $u \in V(G)$ un suo vertice, l'algoritmo restituisce le distanze pesate dei vertici di $G$ da $u$; l'algoritmo assume che ogni vertice di $G$ sia raggiungibile da $u$, e che ogni peso definito da $w$ sia positivo.\\ \textbf  {Input}: $G$ grafo, e $u$ un suo vertice tale che per ogni $x \in V(G)$ esiste un cammino della forma $u \rightarrow x$; $w$ una funzione che associa pesi agli archi in $E(G)$, tale che ogni peso sia positivo.\\ \textbf  {Output}: le distanze pesate dei vertici di $G$ da $u$. }}{65}{algorithm.2.2.2.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.2.2.2}{\ignorespaces  Dato un grafo pesato $G$ attraverso $w$, e $u \in V(G)$ un suo vertice, l'algoritmo restituisce le distanze pesate dei vertici di $G$ da $u$; l'algoritmo assume che ogni vertice di $G$ sia raggiungibile da $u$, e che ogni peso definito da $w$ sia positivo.\\ \textbf  {Input}: $G$ grafo, e $u$ un suo vertice tale che per ogni $x \in V(G)$ esiste un cammino della forma $u \rightarrow x$; $w$ una funzione che associa pesi agli archi in $E(G)$, tale che ogni peso sia positivo.\\ \textbf  {Output}: le distanze pesate dei vertici di $G$ da $u$. }}{66}{algorithm.2.2.2.2}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.3}Intervalli}{68}{section.2.3}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.1}Trovare intervalli disgiunti}{68}{subsection.2.3.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.3.1.1}{\ignorespaces  Data una lista di intervalli, l'algoritmo restituisce il sottoinsieme di intervalli disgiunti, di cardinalità massima.\\ \textbf  {Input}: $I$ lista di intervalli di numeri reali della forma $[a, b]$, con $a, b \in \mathbb  {R}$.\\ \textbf  {Output}: il sottoinsieme di $I$ di intervalli disgiunti di cardinalità massima. }}{68}{algorithm.2.3.1.1}\protected@file@percent }
\newlabel{intervalli1}{{0}{68}{Trovare intervalli disgiunti}{algorithm.2.3.1.1}{}}
\newlabel{intervalli1@cref}{{[line][0][]0}{[1][67][]68}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3.2}Trovare insieme non disgiunto}{71}{subsection.2.3.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.3.2.1}{\ignorespaces  Data una lista di intervalli, l'algoritmo restituisce l'insieme, di cardinalità minima, di interi $x_1, \ldots  , x_k$, tali da intersecarsi con ogni intervallo.\\ \textbf  {Input}: $I$ lista di intervalli di numeri reali della forma $[a, b]$, con $a, b \in \mathbb  {R}$.\\ \textbf  {Output}: l'insieme minimo di $x_1, \ldots  , x_n$ tali che $\forall i \in I \hskip 1em\relax i \cap \{x_1, \ldots  , x_n\} \neq  \varnothing $. }}{71}{algorithm.2.3.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {2.4}Minimum Spanning Tree (MST)}{73}{section.2.4}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.1}Definizioni}{73}{subsection.2.4.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.3}{\ignorespaces Un grafo indiretto pesato.}}{73}{figure.2.3}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2.4}{\ignorespaces Un MST del grafo pesato.}}{73}{figure.2.4}\protected@file@percent }
\newlabel{lemma mst}{{2.4.1.1}{73}{MST aciclici}{tcb@cnt@framedlem.2.4.1.1}{}}
\newlabel{lemma mst@cref}{{[framedlem][1][2,4,1]2.4.1.1}{[1][73][]73}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.2}Algoritmo di Kruskal}{74}{subsection.2.4.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.4.2.1}{\ignorespaces  Dato un grafo indiretto connesso $G$, pesato attraverso $w$ con pesi strettamente positivi, l'algoritmo ne restituisce un MST.\\ \textbf  {Input}: $G$ grafo indiretto connesso; $w$ una funzione che associa pesi, strettamente positivi, agli archi in $E(G)$.\\ \textbf  {Output}: un MST di $G$. }}{74}{algorithm.2.4.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4.3}Algoritmo di Prim}{77}{subsection.2.4.3}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.4.3.1}{\ignorespaces  Dato un grafo indiretto connesso $G$, pesato attraverso $w$ con pesi positivi, l'algoritmo ne restituisce un MST.\\ \textbf  {Input}: $G$ grafo indiretto connesso; $w$ una funzione che associa pesi positivi agli archi in $E(G)$.\\ \textbf  {Output}: un MST di $G$. }}{77}{algorithm.2.4.3.1}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {2.4.3.2}{\ignorespaces  Dato un grafo indiretto connesso $G$, pesato attraverso $w$ con pesi positivi, l'algoritmo ne restituisce un MST.\\ \textbf  {Input}: $G$ grafo indiretto connesso; $w$ una funzione che associa pesi positivi agli archi in $E(G)$.\\ \textbf  {Output}: un MST di $G$. }}{80}{algorithm.2.4.3.2}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {3}Algoritmi Divide et Impera}{83}{chapter.3}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {3.1}Algoritmi Divide et Impera}{83}{section.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.1}Definizioni}{83}{subsection.3.1.1}\protected@file@percent }
\newlabel{master theorem}{{3.1.1.1}{83}{Master theorem - Teorema principale}{tcb@cnt@framedthm.3.1.1.1}{}}
\newlabel{master theorem@cref}{{[framedthm][1][3,1,1]3.1.1.1}{[1][83][]83}}
\@writefile{toc}{\contentsline {subsection}{\numberline {3.1.2}Trovare la somma massima dei sotto-array}{85}{subsection.3.1.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {3.1.2.1}{\ignorespaces  Dato un array \texttt  {A} di $n$ interi, l'algoritmo restituisce la somma massima tra i suoi sotto-array contigui.\\ \textbf  {Input}: \texttt  {A} un array di $n$ interi.\\ \textbf  {Output}: la somma massima tra i sotto-array contigui di \texttt  {A}. }}{85}{algorithm.3.1.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {chapter}{\numberline {4}Programmazione dinamica}{88}{chapter.4}\protected@file@percent }
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\@writefile{toc}{\contentsline {section}{\numberline {4.1}Programmazione dinamica}{88}{section.4.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1.1}Definizioni}{88}{subsection.4.1.1}\protected@file@percent }
\@writefile{toc}{\contentsline {section}{\numberline {4.2}Memoizzazione}{89}{section.4.2}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.1}Definizioni}{89}{subsection.4.2.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.2}Trovare il massimo spazio allocabile}{89}{subsection.4.2.2}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {4.2.2.1}{\ignorespaces  Data una lista \texttt  {S} di dimensioni di $n$ file, e una memoria di capacità $C$, l'algoritmo restituisce il massimo spazio che può essere allocato dai file in \texttt  {S} sulla memoria; inoltre, i file hanno tutti dimensione inferiore a $C$.\\ \textbf  {Input}: \texttt  {S} lista di dimensioni di file; $C$ capacità della memoria, tale che $\forall s_i \in \texttt  {S} \hskip 1em\relax s_i \le C$.\\ \textbf  {Output}: quantità di spazio massima che è possibile allocare. }}{89}{algorithm.4.2.2.1}\protected@file@percent }
\newlabel{fileallocation}{{0}{89}{Trovare il massimo spazio allocabile}{algorithm.4.2.2.1}{}}
\newlabel{fileallocation@cref}{{[line][0][]0}{[1][89][]89}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {4.2.2.2}{\ignorespaces  Data una lista \texttt  {S} di dimensioni di $n$ file, una memoria di capacità $C$, e la matrice costruita attraverso la funzione \texttt  {fileAllocation} dell'\cref  {fileallocation}, l'algoritmo restituisce un insieme di file che massimizza la memoria allocata; inoltre, i file hanno tutti dimensione inferiore a $C$.\\ \textbf  {Input}: \texttt  {S} lista di dimensioni di file; $C$ capacità della memoria, tale che $\forall s_i \in \texttt  {S} \hskip 1em\relax s_i \le C$; \texttt  {T} matrice prodotta precedentemente.\\ \textbf  {Output}: un insieme di file che massimizza la memoria allocata. }}{92}{algorithm.4.2.2.2}\protected@file@percent }
\newlabel{fileallocation2}{{0}{92}{Trovare il massimo spazio allocabile}{algorithm.4.2.2.2}{}}
\newlabel{fileallocation2@cref}{{[line][0][]0}{[1][91][]92}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.3}Knapsack problem}{93}{subsection.4.2.3}\protected@file@percent }
\@writefile{loa}{\contentsline {algorithm}{\numberline {4.2.3.1}{\ignorespaces  Date due liste \texttt  {V} e \texttt  {P}, rispettivamente rappresentanti il valore e il peso di $n$ oggetti, ed uno zaino di capienza $C$, l'algoritmo restituisce il massimo valore che può essere totalizzato dagli oggetti in input, all'interno dello zaino, senza sforare la sua capienza massima in termini di peso; inoltre, gli oggetti hanno tutti peso inferiore a $C$.\\ \textbf  {Input}: \texttt  {V} lista di valori di oggetti; \texttt  {P} lista di pesi di oggetti; $C$ capienza dello zaino, tale che $\forall p_i \in \texttt  {P} \hskip 1em\relax p_i \le C$.\\ \textbf  {Output}: valore massimo che è possibile totalizzare. }}{93}{algorithm.4.2.3.1}\protected@file@percent }
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2.4}Trovare il peso massimo di un cammino}{94}{subsection.4.2.4}\protected@file@percent }
\newlabel{lemma grafi max}{{4.2.4.1}{94}{Pesi di cammini}{tcb@cnt@framedlem.4.2.4.1}{}}
\newlabel{lemma grafi max@cref}{{[framedlem][1][4,2,4]4.2.4.1}{[1][94][]94}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {4.2.4.1}{\ignorespaces  Dato un grafo $G$ diretto aciclico, pesato attraverso $w$ con pesi sia positivi che negativi, e due suoi nodi $u, v \in V(G)$, l'algoritmo restituisce il peso massimo che un cammino della forma $u \rightarrow y$ può avere.\\ \textbf  {Input}: $G$ grafo diretto aciclico; $w$ funzione dei pesi degli archi; $u, y \in V(G)$ due vertici di $G$.\\ \textbf  {Output}: peso massimo di un cammino $u \rightarrow y$. }}{95}{algorithm.4.2.4.1}\protected@file@percent }
\newlabel{maxWeightPaths}{{0}{95}{Trovare il peso massimo di un cammino}{algorithm.4.2.4.1}{}}
\newlabel{maxWeightPaths@cref}{{[line][0][]0}{[1][94][]95}}
\@writefile{loa}{\contentsline {algorithm}{\numberline {4.2.4.2}{\ignorespaces  Dato un grafo $G$ diretto aciclico, pesato attraverso $w$ con pesi sia positivi che negativi, due suoi nodi $u, v \in V(G)$, e la matrice costruita attraverso la funzione \texttt  {maxWeightPaths} dell'\cref  {maxWeightPaths}, l'algoritmo restituisce un cammino, della forma $u \rightarrow y$, che realizza tale peso massimo.\\ \textbf  {Input}: $G$ grafo diretto aciclico; $w$ funzione dei pesi degli archi; $u, y \in V(G)$ due vertici di $G$; \texttt  {T} matrice prodotta precedentemente.\\ \textbf  {Output}: cammino tale da massimizzare il peso di un cammino $u \rightarrow y$. }}{98}{algorithm.4.2.4.2}\protected@file@percent }
\abx@aux@read@bbl@mdfivesum{nobblfile}
\gdef \@abspage@last{102}
